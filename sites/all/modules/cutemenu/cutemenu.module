<?php
// $Id: cutemenu.module,v 1.8.2.14 2010/04/15 06:05:20 alexiswilke Exp $

/**
 * Add Javascript and CSS files
 */
function cutemenu_init() {
  $path = drupal_get_path('module', 'cutemenu');
  drupal_add_css($path . '/cutemenu.css');
  drupal_add_js($path . '/cutemenu.js');
}

/**
 * Implementation of hook_block().
 */
function cutemenu_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
  case 'list':
    $menus = menu_get_menus();
    foreach ($menus as $key => $menu) {
      $blocks[$key]['info'] = t('CuteMenu: !name', array('!name' => $menu));
    }
    return $blocks;

  case 'configure':
    $form = array();

    $sql = "SELECT * FROM {cutemenu_block} WHERE menu_name = '%s'";
    $db = db_query($sql, $delta);
    if ($db) {
      $block_info = db_fetch_object($db);
    }
    if (!$block_info) {
      $block_info = (object) array(
        'hide_menu_without_submenus' => 0,
        'top_menu_use_links' => 0,
        'top_menu_use_css' => 0,
      );
    }

    $form['hide_menu_without_submenus'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide menu entries without sub-menus.'),
      '#default_value' => $block_info->hide_menu_without_submenus,
      '#description' => t('Tell the system whether plain menus should be shown or not. By default, CuteMenu shows all top menus of the block.'),
    );

    $form['top_menu_use_links'] = array(
      '#type' => 'checkbox',
      '#title' => t('Top menu buttons use links.'),
      '#default_value' => $block_info->top_menu_use_links,
      '#description' => t('When checked the top menus are turned into links.'),
    );

    $form['top_menu_use_css'] = array(
      '#type' => 'checkbox',
      '#title' => t('Top menu buttons use CuteMenu Stylesheet.'),
      '#default_value' => $block_info->top_menu_use_css,
      '#description' => t('Whether the top menus are left alone (Drupal default) or assigned the CuteMenu style.'),
    );

    return $form;

  case 'save':
    $sql = "UPDATE {cutemenu_block} SET hide_menu_without_submenus = %d, top_menu_use_links = %d, top_menu_use_css = %d WHERE menu_name = '%s'";
    db_query($sql, $edit['hide_menu_without_submenus'], $edit['top_menu_use_links'], $edit['top_menu_use_css'], $edit['delta']);
    if (db_affected_rows() == 0) {
      $sql = "INSERT INTO {cutemenu_block} (menu_name, hide_menu_without_submenus, top_menu_use_links, top_menu_use_css) VALUES ('%s', %d, %d, %d)";
      db_query($sql, $edit['delta'], $edit['hide_menu_without_submenus'], $edit['top_menu_use_links'], $edit['top_menu_use_css']);
    }
    break;

  case 'view':
    $block['content'] = _cutemenu_build($delta);
    if ($block['content']) {
      $block['subject'] = t('CuteMenu: !name', array('!name' => $delta));
      return $block;
    }
    break;

  }
}

function _cutemenu_build($menu_name) {
  // DO NOT SPECIFY AN ITEM, or only the root items
  // will be shown... (i.e. no dropdown)
  $items = menu_tree_all_data($menu_name, NULL);

  $sql = "SELECT * FROM {cutemenu_block} WHERE menu_name = '%s'";
  $db = db_query($sql, $menu_name);
  if ($db) {
    $block_info = db_fetch_object($db);
  }
  if (!$block_info) {
    $block_info = (object) array(
      'hide_menu_without_submenus' => 0,
      'top_menu_use_links' => 0,
      'top_menu_use_css' => 0,
    );
  }
  $hide_menus_without_submenus = $block_info->hide_menu_without_submenus != 0;
  $top_menu_use_links = $block_info->top_menu_use_links != 0;
  $top_menu_use_css = $block_info->top_menu_use_css == 0;

  $output = "";
  if ($top_menu_use_css) {
    $output = '<ul class="menu">';
  }
  foreach ($items as $key => $item) {
    // skip disabled top items, we must delete them!
    if ($item['link']['hidden']) {
      unset($items[$key]);
      continue;
    }

    // determine whether this menu item will be shown

    // We want to loop through the list of items and make
    // sure that we do have normal dropdown items. If not, we
    // need to mark that this item has no dropdown.
    $has_dropdown = $item['below'] !== FALSE;
    if ($has_dropdown) {
      // set back to true only if we find a valid item
      $has_dropdown = FALSE;

      foreach ($item['below'] as $k => $i) {
        $sql = 'SELECT * FROM {cutemenu_menu_item} WHERE mlid = %d';
        $db = db_query($sql, $i['link']['mlid']);
        $role = 'normal';
        if ($db) {
          $menu_item_info = db_fetch_object($db);
          if ($menu_item_info) {
            $role = $menu_item_info->menu_role;
          }
        }
        if ($role == 'header') {
          if (isset($header)) {
            drupal_set_message("You defined two headers in $menu_name", 'error');
          }
          $items[$key]['header'] = $i;
          $items[$key]['below'][$k]['role'] = 'header';
        }
        elseif ($role == 'footer') {
          if (isset($footer)) {
            drupal_set_message("You defined two footers in $menu_name", 'error');
          }
          $items[$key]['footer'] = $i;
          $items[$key]['below'][$k]['role'] = 'footer';
        }
        elseif ($role == 'title') {
          $items[$key]['below'][$k]['role'] = 'title';
        }
        elseif ($i['link']['hidden']) {
          $items[$key]['below'][$k]['role'] = 'hidden';
        }
        /*elseif ($role == 'normal') ... -- we assume the default from here */
        else {
          $items[$key]['below'][$k]['role'] = 'normal';
          $has_dropdown = TRUE;
        }
      }
    }
    if (!$has_dropdown && $hide_menus_without_submenus) {
      // actually, we're skipping this one! (all that work for nothing...)
      unset($items[$key]);
      continue;
    }
    // keep the flag for later
    $items[$key]['has_dropdown'] = $has_dropdown;
  }
  // worth gathering the parents of the current item?
  $parents = array();
  if (count($items) > 0) {
    if ($item = menu_get_item()) {
      // warning: here $item is the menu_router, not the menu_entry
      $args = array($menu_name, $item['href']);
      $placeholders = "'%s'";
      if (drupal_is_front_page()) {
        $args[] = '<front>';
        $placeholders .= ", '%s'";
      }
      $item = db_fetch_array(db_query("SELECT * FROM {menu_links} WHERE menu_name = '%s' AND link_path IN (". $placeholders .")", $args));
      if ($item) {
        // include the item itself
        $mlid = $item['mlid'];
        $parents = array($mlid => $mlid);
        for ($i = 1; $i < MENU_MAX_DEPTH; $i++) {
          $pmlid = $item["p$i"];
          $parents[$pmlid] = $pmlid;
        }
      }
    }
  }
  $index = 0;
  $index_last = count($items) - 1;
  foreach ($items as $item) {
    $js_bool = $item['has_dropdown'] ? 'true' : 'false';
    $extra_class = '';
    if ($index == 0) {
      $extra_class .= $top_menu_use_css ? " first" : " cutemenu-first";
    }
    if ($index == $index_last) {
      $extra_class .= $top_menu_use_css ? " last" : " cutemenu-last";
    }
    // The system call menu_get_all_data() does NOT set 'in_active_trail'
    // when not item is specified... and specifying an item does not return
    // everything but only whatever is found under that item.
    $item['link']['in_active_trail'] = in_array($item['link']['mlid'], $parents);
    if ($item['link']['in_active_trail']) {
      $extra_class .= " active";
    }
    $cl = ' class="' . ($top_menu_use_css ? 'leaf' : 'cutemenu-baritem') . $extra_class . '"';
    $id = ' id="cutemenu-' . $item['link']['mlid'] . '"';
    $js = ' onmouseover="javascript:cutemenu_mouseover(this, \'' . $item['link']['mlid'] . '\', ' . $js_bool . ');"'
        . ' onmouseout="javascript:cutemenu_mouseout();"';
    $params = $id . $cl . $js;// . ' counter="' . $index . '"';
    if ($top_menu_use_css) {
      $output .= "<li $params>\n";
      $output .= "  " . _cutemenu_menu_link($item, !$item['has_dropdown'] || $top_menu_use_links) . "\n";
    }
    else {
      $output .= "<div $params>";
      $output .= '<div class="cutemenu-baritem-left">';
      $output .= '<div class="cutemenu-baritem-right">';
      $output .= '<div id="cutemenu-content-' . $item['link']['mlid'] . '" class="cutemenu-baritem-content' . $extra_class . '">' . "\n";

      $output .= '  ' . _cutemenu_menu_link($item, !$item['has_dropdown'] || $top_menu_use_links) . "\n";
    }

    // child menu?
    if ($item['has_dropdown']) {
      // wrapper and main dropdown blocks
      $output .= '  <div id="cutemenu-dropdown-' . $item['link']['mlid'] . '" class="cutemenu-dropdown-wrapper">';
      $output .= '<div class="cutemenu-dropdown">' . "\n";

      // top blocks (left, right, top)
      $output .= '    <div class="cutemenu-dropdown-topleft">';
      $output .= '<div class="cutemenu-dropdown-topright">';
      $output .= '    <div class="cutemenu-dropdown-bottomleft">';
      $output .= '<div class="cutemenu-dropdown-bottomright">';
      $output .= '<div class="cutemenu-dropdown-top"></div>' . "\n";

      // content blocks (left, right, content)
      $output .= '    <div class="cutemenu-dropdown-left"><div class="cutemenu-dropdown-right"><div class="cutemenu-dropdown-content">' . "\n";

      $cutemenu_header = '';
      if ($item['header']) {
        $header_node = node_load(str_replace('node/', '', $item['header']['link']['link_path']));
        if ($header_node) {
          if (substr($header_node->title, 0, 6) != '<none>') {
            $cutemenu_header = '<h2>' . $header_node->title . '</h2>';
          }
          $cutemenu_header .= '<div>' . $header_node->body . '</div>';
        }
        elseif (function_exists('views_get_view')) {
          $view = views_get_view($item['header']['link']['link_path']);
          if ($view) {
            $cutemenu_header = $view->preview('page', '');
          }
        }
      }
      $output .= '      <div class="cutemenu-dropdown-header">' . $cutemenu_header . "</div>\n";

      $output .= '      <div class="cutemenu-submenu">' . "\n";
      foreach ($item['below'] as $i) {
        switch ($i['role']) {
        case 'header':
        case 'footer':
        case 'hidden':
          break;

        case 'title':
          $output .= '      <div id="cutemenu-' . $i['link']['mlid'] . '" class="cutemenu-title">';
          $output .= _cutemenu_menu_link($i, FALSE);
          $output .= "</div>\n";
          break;

        default: // 'normal' is the default
          // The system call menu_get_all_data() does NOT set 'in_active_trail'
          // when not item is specified... and specifying an item does not return
          // everything but only whatever is found under that item.
          $i['link']['in_active_trail'] = in_array($i['link']['mlid'], $parents);
          if ($i['link']['in_active_trail']) {
            $extra_class = " active";
          }
          else {
            $extra_class = "";
          }
          $output .= '      <div id="cutemenu-' . $i['link']['mlid'] . '"'
                   . ' class="cutemenu-subitem' . $extra_class . '"'
                   . ' onmouseover="javascript:cutemenu_subitem_mouseover(this);"'
                   . ' onmouseout="javascript:cutemenu_subitem_mouseout(this);">';
          $output .= _cutemenu_menu_link($i, TRUE, TRUE);
          $output .= "</div>\n";
          break;

        }
      }
      $output .= "      </div>\n";

      $cutemenu_footer = '';
      if (isset($item['footer']) && $item['footer']) {
        $footer_node = node_load(str_replace('node/', '', $item['footer']['link']['link_path']));
        if ($footer_node) {
          if (substr($footer_node->title, 0, 6) != '<none>') {
            $cutemenu_footer = '<h2>' . $footer_node->title . '</h2>';
          }
          $cutemenu_footer .= '<div>' . $footer_node->body . '</div>';
        }
        elseif (function_exists('views_get_view')) {
          $view = views_get_view($item['footer']['link']['link_path']);
          if ($view) {
            $cutemenu_footer = $view->preview('page', '');
          }
        }
      }
      $output .= '      <div class="cutemenu-dropdown-footer">' . $cutemenu_footer . "</div>\n";

      $output .= "    </div></div></div>\n"; // closing the dropdown left, right & content
      $output .= '<div class="cutemenu-dropdown-bottom">' . "\n";
      $output .= "    </div></div></div>\n"; // closing the bottom areas
      $output .= "    </div></div>\n"; // closing the top-left/right area
      $output .= "  </div></div>\n"; // closing the cutemenu-dropdown & cutemenu-dropdown-wrapper
    }

    if ($top_menu_use_css) {
      $output .= "</li>\n";
    }
    else {
      $output .= "</div></div></div></div>\n";
    }

    ++$index;
  }
  if ($top_menu_use_css) {
    $output .= '</ul>';
  }

  return "<div class='cutemenu-bar'>\n" . $output . "</div>\n";
}

function _cutemenu_menu_link($item, $link, $div = TRUE) {
  // fix the attributes as required
  $localized_options = $item['link']['localized_options'];
  if ($item['link']['in_active_trail']) {
    $classes = '';
    if (!empty($localized_options['attributes']['class'])) {
      $classes = $localized_options['attributes']['class'] . ' ';
    }
    $classes .= 'active-trail';
    $localized_options['attributes']['class'] = $classes;
  }

  // use t() so one can do a translation of the link name on the fly (with gettext() functionality)
  $title = t('!link_name', array('!link_name' => check_plain($item['link']['title'])));

  if ($link) {
    // generate and return the link
    if (is_array($localized_options['attributes'])) {
      $opt_attr = $localized_options['attributes'];
      if (!empty($opt_attr['class'])) {
        $opt_attr['class'] .= ' cutemenu-link';
      }
      else {
        $opt_attr['class'] = 'cutemenu-link';
      }
    }
    else {
      $opt_attr = array(
        'class' => 'cutemenu-link',
      );
    }
    $attr = '';
    foreach ($opt_attr as $name => $value) {
      $attr .= ' ' . $name . '="' . check_plain($value) . '"';
    }
    // transform the path to the corresponding alias
    $href = drupal_get_path_alias($item['link']['href']);
    return '<a href="' . url($href) . '"' . $attr . '>' . $title . '</a>';
  }

  if ($div) {
    return '<div class="cutemenu-label">' . $title . '</div>';
  }

  return $title;
}

/**
 * Implementation of hook_form_alter()
 */
function cutemenu_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
  case 'menu_edit_item':
    // make sure the submit button appears after our fieldset
    $form['submit']['#weight'] = 1;

    $sql = "SELECT * FROM {cutemenu_menu_item} WHERE mlid = %d";
    $menu_item_info = NULL;
    if (isset($form['menu']['#item']['mlid']) && $form['menu']['#item']['mlid']) {
      $db = db_query($sql, $form['menu']['#item']['mlid']);
      if ($db) {
        $menu_item_info = db_fetch_object($db);
      }
    }
    if (!$menu_item_info) {
      $menu_item_info = (object) array('menu_role' => 'normal');
    }

    $form['cutemenu'] = array(
      '#type' => 'fieldset',
      '#title' => t('CuteMenu settings'),
      '#description' => t('Menu Item specific setup for CuteMenu.'),
      '#collapsible' => TRUE,
      '#collapsed' => $menu_item_info->menu_role == 'normal', // hide by default, unless not normal
    );

    $form['cutemenu']['menu_role'] = array(
      '#type' => 'radios',
      '#title' => t('Menu Item Role'),
      '#options' => array('normal' => t('Normal Menu Item'),
                          'header' => t('Header, use destination node as the Header'),
                          'footer' => t('Footer, use destination node as the Footer'),
                          'title'  => t('Title, use destination node as a menu Title')),
      '#default_value' => $menu_item_info->menu_role,
      '#description' => t('Choose how the item is to be used. By default, CuteMenu expects the items to be Normal.'),
    );

    $form['#submit'][] = '_cutemenu_menu_edit_item_submit';
    break;

  }
}

/**
 * hook_submit()
 * Submit for menu edit item.
 */
function _cutemenu_menu_edit_item_submit($form, &$form_state) {
  if ($form_state['submitted']) {
    $mlid = $form_state['values']['menu']['mlid'];
    if ($mlid) {
      $sql = "UPDATE {cutemenu_menu_item} SET menu_role = '%s' WHERE mlid = %d";
      db_query($sql, $form_state['values']['menu_role'], $mlid);
      if (db_affected_rows() == 0) {
        $sql = "INSERT INTO {cutemenu_menu_item} (mlid, menu_role) VALUES (%d, '%s')";
        db_query($sql, $mlid, $form_state['values']['menu_role']);
      }
    }
    else {
      // in this case we just cannot save anything, too bad
      drupal_set_message(t('The menu link identifier was not defined on Submit in <b>CuteMenu</b>. You are most certainly adding a new menu item. For this feature to work when adding a menu item, you must apply the patch defined in <a href="http://drupal.org/node/326210" target="_blank">node #326210</a>. That patch is included in this module for that purpose.'), 'error');
    }
  }
}

// vim: ts=2 sw=2 et syntax=php
