<?php
// $Id: user_karma.module,v 1.1.2.5.2.2 2008/11/26 21:44:58 scor Exp $

/**
 * @file
 * The theme system, which controls the output of Drupal.
 *
 */

/**
 * Implementation of hook_help().
 */
function user_karma_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      // This description is shown in the listing at admin/modules.
      return t('User karma module');
  }
}


/**
 * Implementation of hook_menu().
 */
function user_karma_menu() {
  global $user;
  $items = array();

  $items['admin/settings/user_karma'] = array(
    'title' => 'User Karma',
    'description' => 'Settings for the user karma module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_karma_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/settings/user_karma/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['user_karma/roles_mass_recalculation'] = array(
    'title' => 'User karma - roles mass-recalculation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_karma_roles_mass_recalculation_confirm'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['user_karma/karma_mass_recalculation'] = array(
    'title' => 'User karma - karma mass-recalculation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_karma_karma_mass_recalculation_confirm'),
    'access callback' => 'user_access',
    'access arguments_' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  // That's all!
  return $items;
}

##################################################################
#                  START OF SETTINGS FORM
##################################################################

/**
 * Return the configuration form. It's quite a form...
 *
 * @return
 *   The config form
 */
function user_karma_admin_settings() {
 
  // Form for the recalculation 
  $form['roles_mass_recalculation'] = array(
    '#weight' => -5,
    '#type' => 'submit',
    '#value' => t('Run the mass-recalculation for user roles'),
  );

  // Form for the recalculation 
  $form['karma_mass_recalculation'] = array(
    '#weight' => -5,
    '#type' => 'submit',
    '#value' => t('Run the mass-recalculation for user karma'),
  );

  $form['roles_selection'] = array(
    '#type' => 'fieldset',
    '#title' => t('Roles eligible for user karma'),
    '#collapsible' => FALSE,
  );

  $roles = user_roles();

  $form['roles_selection']['user_karma_eligible_roles'] = array(
    '#type' => 'select',
    '#title' => t('Choose roles for user karma'),
    '#description' => t('You should choose roles created specifically for user karma.'),
    '#options' => $roles,
    '#default_value' => variable_get('user_karma_eligible_roles', array()),
    '#multiple' => TRUE,
    '#size' => 10,
  );

  $form['role_assigning'] = array(
    '#type' => 'fieldset',
    '#title' => t('Assigning roles to karma amounts'),
    '#description' => !variable_get('user_karma_eligible_roles', array()) ? t('There are roles currently eligible for user karma.') : t('Configure the user karma settings for each eligible role.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $karma_role_options[0] = t("Consider these absolute values");
  $karma_role_options[1] = t("Consider these as the user's ranking, out of 10000");

  foreach (variable_get('user_karma_eligible_roles', array()) as $rid) {

    $form['role_assigning']['user_karma_role_fieldset_'. $rid] = array(
      '#type' => 'fieldset',
      '#title' => t('User karma setting for role @role', array('@role' => $roles[$rid])),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    
    $form['role_assigning']['user_karma_role_fieldset_'. $rid]['user_karma_role_'. $rid .'_from'] = array(
      '#type' => 'textfield',
      '#title' => t('From'),
      '#description' => t('Leaving an empty value means "from minus infinite"'),
      '#size' => 7,
      '#maxlength' => 7,
      '#default_value' => variable_get('user_karma_role_'. $rid .'_from', ''),
    );
    
    $form['role_assigning']['user_karma_role_fieldset_'. $rid]['user_karma_role_'. $rid .'_to'] = array(
      '#type' => 'textfield',
      '#title' => t('To'),
      '#description' => t('Leaving an empty value means "to infinite"'),
      '#size' => 7,
      '#maxlength' => 7,
      '#default_value' => variable_get('user_karma_role_'. $rid .'_to', ''),
    );

    $form['role_assigning']['user_karma_role_fieldset_'. $rid]['user_karma_role_'. $rid .'_type'] = array(
      '#title' => t('How to interpret the numbers in the range'),
      '#type' => 'radios',
      '#options' => $karma_role_options,
      '#default_value' => variable_get('user_karma_role_'. $rid .'_type', 0),
    );
  }

  $form['user_karma_expire_cron_every'] = array(
    '#type' => 'textfield',
    '#title' => t('How often (in hours) the recalculation for users with possibly expired points is run'),
    '#size' => 4,
    '#maxlength' => 4,
    '#default_value' => variable_get('user_karma_expire_cron_every', 168),
  );

  $form['user_karma_show_karma_in_user_page'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show karma in the user profile page'),
    '#default_value' => variable_get('user_karma_show_karma_in_user_page', FALSE), 
  );

  $form['user_karma_show_ranking_in_user_page'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show ranking in the user profile page'),
    '#default_value' => variable_get('user_karma_show_ranking_in_user_page', FALSE), 
  );

  $form['user_karma_load_karma_in_profile'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create a "karma" attribute for a $user'),
    '#default_value' => variable_get('user_karma_load_karma_in_profile', FALSE),
  );

  $form['user_karma_load_rank_in_profile'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create a "rank" attribute for a $user'),
    '#default_value' => variable_get('user_karma_load_rank_in_profile', FALSE),
  );

  $form['user_karma_debug_messages'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show debug messages.'),
    '#default_value' => variable_get('user_karma_debug_messages', FALSE),
  );

  return system_settings_form($form);
}

/** 
 * Implementation of hook_validate(). 
 * Used to validate user_karma_admin_settings()
 * The only interesting part is that it will "derail" the flow in case
 * the user clicked on the "Mass recalculation" button
 */
function user_karma_admin_settings_validate($form, &$form_state) {
  // This hook will sneakly intercept the roles recalculation request
  // and will redirect accordingly to the roles mass-recalculation
  // function
  if ($form_state['values']['op'] == t('Run the mass-recalculation for user roles')) {
    drupal_goto('user_karma/roles_mass_recalculation');
  }
  // This hook will sneakly intercept the karma recalculation request
  // and will redirect accordingly to the karma mass-recalculation
  // function
  if ($form_state['values']['op'] == t('Run the mass-recalculation for user karma')) {
    drupal_goto('user_karma/karma_mass_recalculation');
  }

}

/**
 * This is a simple confirmation step to make sure that the
 * user really wants to go ahead
 *
 * @return
 *   The confirmation form
 */
function user_karma_roles_mass_recalculation_confirm() {
  return confirm_form(
    array(), 
    t('Are you sure you want to recalculate the role of every single user?'),
    'admin/settings/user_karma', 
    t('The role of every single user will be recalculated according to the current range values'), 
    t('Run mass-recalcuation of roles'), t('Cancel')
  );
}

/**
 * At this point, the answer was confirmed. So, the recalculation
 * actually takes place
 *
 * @param $form_id
 *   The form id
 * @param $form
 *   The form
 * @return
 *   A redirection to the module's configuration screen
 */
function user_karma_roles_mass_recalculation_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    user_karma_roles_mass_recalculation();
    drupal_set_message(t('The recalculation was done!'));
    //return 'admin/settings/user_karma';
    $form_state['redirect'] = 'admin/settings/user_karma';
  }
}

/**
 * This is a simple confirmation step to make sure that the
 * user really wants to go ahead
 *
 * @return
 *   The confirmation form
 */
function user_karma_karma_mass_recalculation_confirm() {
  return confirm_form(
    array(), 
    t('Are you sure you want to recalculate the karma of every single user?'),
    'admin/settings/user_karma', 
    t('The karma of every single user will be recalculated'), 
    t('Run mass-recalcuation of karma'), t('Cancel')
  );
}

/**
 * At this point, the answer was confirmed. So, the recalculation
 * actually takes place
 *
 * @param $form_id
 *   The form id
 * @param $form
 *   The form
 * @return
 *   A redirection to the module's configuration screen
 */
function user_karma_karma_mass_recalculation_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    user_karma_karma_mass_recalculation();
    drupal_set_message(t('The recalculation was done!'));
    //return 'admin/settings/user_karma';
    $form_state['redirect'] = 'admin/settings/user_karma';
  }
}

##################################################################
#                  END OF SETTINGS FORM
##################################################################

##################################################################
#              INTERFACING WITH THE VOTING API
##################################################################

function user_karma_calculate_karma($uid) {
  user_karma_msg("In 'user_karma_calculate_karma'");

  // Calculates the karma
  $total_karma_amount = 0;
  foreach (module_invoke_all('user_karma_partial', $uid) as $partial_karma ) {
    user_karma_msg("Adding partial karma $partial_karma ");
    $total_karma_amount += $partial_karma;
  }
  
  
  user_karma_msg("Total karma amount: $total_karma_amount ");

  // Create the voting array
  $new_vote = array();
  $new_vote['value'] = $total_karma_amount;
  $new_vote['value_type'] = 'karma_points';
  $new_vote['tag'] = 'karma';
  $new_vote['content_id'] = $uid;
  $new_vote['content_type'] = 'user';
  $new_vote['uid'] = 1;
  
  $criteria = array();
  $criteria['value_type'] = 'karma_points';
  $criteria['tag'] = 'karma';
  $criteria['content_id'] = $uid;
  $criteria['content_type'] = 'user';
  $criteria['uid'] = 1;
  
  // Actually do the voting - it's basically a vote to the author
  // of the object (comment or node), that is, the ->uid
  votingapi_set_votes($new_vote, $criteria);
   
  user_karma_calculate_role($uid);

  module_invoke_all('user_karma_recalculate_user', $uid);
}

/**
 * Implementation of hook_votingapi_results_alter().
 * It's important to have this hook so that a cached entry is created for
 * the user which has just received karma.
 * This will probably get called also when another module ever votes on
 * a user. But that's OK.
 * 
 */

function user_karma_votingapi_results_alter(&$results, $content_type, $content_id) {
  if ($content_type == 'user') {
    
    // Get the caches vote by admin. Basically, the cache here is just
    // a copy of admin's vote.
    $existing_vote = user_karma_user_karma($content_id);
    //drupal_set_message("Existing vote: $existing_vote");

    // Set the $cache variable, so that a new record will be added to
    // votingapi_cache
    $results['karma']['karma_points']['sum'] = $existing_vote;
  }
  return TRUE;
}

/**
 * The module's cron hook. It's used to make sure that sub-modules which
 * can set a limit (in days) at which point those points will expire. 
 * If that is indeed the * case, a recalculation (of both karma and role) 
 * is run.
 *
 * This plugin is based on the ability of sub-plugin to implement
 * hook_user_karma_point_duration()
 * 
 * @return
 *   Nothing
 */
function user_karma_cron() {
  user_karma_msg("user_karma's votingAPI cron cron started!");

  // This will only happen once every XX hours maximum
  $cron_timestamp = variable_get('user_karma_cron_timestamp', '');
  if ((time() - $cron_timestamp) >= 60 * 60 * variable_get('user_karma_expire_cron_every', 168)) {

    user_karma_msg("In the 'point recalc' section!");

    // ************************************************************
    // Recalculate the karma for users with comments which have
    // expired 
    // Only do the recalculation if an expiration is set for the
    // users' karma points


    // Gets the list of days duration from the plugin modules, and filters
    // the array out for empty ones
    $days_list = array_filter(module_invoke_all('user_karma_point_duration') );

    // Gets the smaller amount of time points can last. Adding a "0" is
    // important in case no plugins are installed (which would be silly,
    // but it IS possible)
    if (count($days_list) == 0) {
      $days_list[] = 0;
    }
    $days = min($days_list);

    // If there aren't any modules available, 

    user_karma_msg("The smallest 'days' variable is $days");
 
    if ($days != 0) {

      user_karma_msg("OK, about to start scanning throgh the users");

      // Scan through all of the users, load each one and
      // run the cache recalculation function
      // This query will only include people who have not received a vote
      // over the time when a karma vote is valid for. So, if a person has
      // received a vote over the last 2 weeks and a vote lasts 2 months, the
      // recalculation won't be done. This will sieve out a few users.
      $query = "SELECT u.uid FROM {users} u LEFT JOIN {votingapi_cache} vc ON u.uid = vc.content_id WHERE vc.content_type = 'user' AND vc.value_type = 'karma_points' ". user_karma_sql_duration($days, 'vc.timestamp', '<');

      user_karma_msg("QUERY: $query");

      $result = db_query($query);
      while ($u = db_fetch_object($result)) {
        user_karma_msg("Calculating karma (CRON) for $u->uid");
        user_karma_calculate_karma($u->uid);
      }
    }
    variable_set('user_karma_cron_timestamp', time());
  }
}

############################################
# The next three functions will call
# hook_user_karma_vote_cast whenever a vote
# is cast . This simplify writing plugins
############################################

/**
 * This is the hook that intercept a vote - insert
 */
function user_karma_votingapi_insert($v) {
  if ($v[0]['value_type'] != 'karma_points') {
    user_karma_msg("hook_insert");
    $value = $v[0]['value'];
    module_invoke_all('user_karma_vote_cast', 'insert', $v, $value);
  }
}

/**
 * This is the hook that intercept a vote - delete
 */
function  user_karma_votingapi_delete($v) {
  if ($v[0]['value_type'] != 'karma_points') {
    user_karma_msg("hook_delete");
    module_invoke_all('user_karma_vote_cast', 'delete', $v, $value);
  }
}



##################################################################
#             END OF INTERFACING WITH THE VOTING API
##################################################################

##################################################################
#         START OF FUNCTIONS FOR THE MANAGEMENT OF ROLES
##################################################################

/**
 * This is where the actual mass-recalculation takes place.
 * First of all, ALL of the roles managed by the module are wiped out.
 * This is why it's CRUCIAL that only specific karma-roles are managed here.
 * Then, the function user_karma_calculate_role($uid,FALSE) is run for
 * each user. Yes, even users with no karmic points, which will have 0 karma
 * whick might, in turn, be associated with some roles.
 * That 'FALSE' is to tell user_karma_calculate_role() that the role
 * deletion has already taken place
 *
 * @return
 *   Nothing
 */
 
function user_karma_roles_mass_recalculation() {

  // Just in case. This could take a little while...
  set_time_limit(300);

  // Deletes right away any role that this module might possibly manage
  $roles = variable_get('user_karma_eligible_roles', array());
  foreach ($roles as $rid) {
    user_karma_msg("Deleting ALL roles $r");
    db_query('DELETE FROM {users_roles} where rid = %d', $rid);
  }

  // Get the list of users. You need the COMPLETE list, since you
  // might want to assign roles to users with no karma points assigned
  $query = "SELECT uid FROM {users} WHERE access<>0";
  $result = db_query($query);

  // Recalculate for each user
  while ($data = db_fetch_object($result)) {
    $uid = $data->uid;
    user_karma_msg("About to recalculate role for $uid");
    user_karma_calculate_role($uid, FALSE);
  }
}

/**
 * This is where the actual karma  mass-recalculation takes place.
 *
 * @return
 *   Nothing
 */
function user_karma_karma_mass_recalculation() {

  // Just in case. This could take a little while...
  set_time_limit(9000);
  
  // Make up the list of users which will need karma recalculation
  // based on who added a node
  $query = "SELECT uid FROM {users} WHERE access<>0";
  $result = db_query($query);
  while ($u = db_fetch_object($result)) {
    user_karma_msg("Calculating karma (MASS) for $u->uid");
    user_karma_calculate_karma($u->uid);
  }
 
}

/**
 * Recalculates the user's roles. NOTE: this function will work on
 * absolute karma values (which sucks rocks) AND on tue user's rank
 * (which is cool)
 *
 * @param $uid
 *   The user id of the user that will have new karmic-roles assigned
 * @param $delete
 *   Default is TRUE. If set to FALSE, this function will not delete roles
 *   before re-assigning them. Mass-recalculation is one of the possible
 *   reasons
 * @return
 *   Nothing
 */
function user_karma_calculate_role($uid, $delete = TRUE) {
  static $users_t;

  user_karma_msg("Calculating role for $uid");

  // Calculates the total number of users, and puts it in a static
  // variable. This way, if a mass recalculation is needed,
  // this query is not run thousands of times
  if (!$users_t) {
    $users_t = db_result(db_query("SELECT COUNT(*) FROM {users} WHERE status = %d", 1));
    user_karma_msg("Users_t is now $users_t . THis should only be calculated once.");
  }

  // Get the karma
  $total_karma = user_karma_user_karma($uid);
  user_karma_msg("Total karma is $total_karma");

  // Calculate the rank. Note that it's on a 1 to 10000 scale, and that
  // if the result is "1" then the rank is left as "1"!
  $rank = user_karma_user_rank($uid);
  user_karma_msg("RB: $rank");
  if ($rank != 1) {
    $rank = (int) ($rank / $users_t * 10000);
  }
  user_karma_msg("RA: $rank");

  $roles = variable_get('user_karma_eligible_roles', array());
  foreach ($roles as $rid) {
    user_karma_msg("Considering role $rid");
    // Create the vars with short names for the three roles/ranges.
    $f =    variable_get('user_karma_role_'. $rid .'_from', '');
    $t =    variable_get('user_karma_role_'. $rid .'_to', '');
    $type = variable_get('user_karma_role_'. $rid .'_type', '');

    user_karma_msg("Variables: $f,$t,$type");

    if ($delete) {
      db_query('DELETE FROM {users_roles} where uid = %d and rid = %d', $uid, $rid ); 
      user_karma_msg("Delete is on");
    }

    // Set which variable will be checked.
    if ($type == 0) { 
      $variable = $total_karma; 
      user_karma_msg("Will compare with 'total_karma'");
    }
    else { 
      $variable = $rank; 
      user_karma_msg("Will compare with 'rank'");
    }

    user_karma_msg("Checked variable: $variable");
    user_karma_msg("Type is $type. Comparing $variable with $f and $t");

    // If the variable is within the range, then assign the role!
    if ($f != '' || $t != '') {
      if (($variable >= $f || $f == '') && ($variable <= $t || $t == '')) {
        db_query('INSERT INTO {users_roles} (uid, rid) values (%d, %d)',  $uid, $rid ); 
        user_karma_msg("ROLE '$rid' ADDED");
      }
    } 
    else {
      user_karma_msg("Role ignored since no range is was assigned");
    }
  
  }
}

/**
 * Returns a list of roles which are handled by the karma module
 *
 * @return
 *   An array with a list of rids
 */
function user_karma_roles() {
  $result = array();

  $roles = variable_get('user_karma_eligible_roles', array());
  foreach ($roles as $rid) {
    $result[] = $rid;
  }
  return $result;
}

/**
 * Returns the list of KARMA roles attached to the user. THis function
 * will only return roles if they are managed by the karma module!
 * Plus, it caches the result to minimise queries.
 *
 * @param $uid
 *   The user id of a user
 * @return
 *   An array with a list of rids ATTACHED to that user
 *   
 */
function user_karma_roles_for_user($uid) {
  static $user_roles;

  // If the user isn't cached, then calculate its roles and put them
  // in the static $user_roles variable
  if (!isset($user_roles[$uid])) {

    user_karma_msg("Calculating available roles for user $uid");

    // After this, the var will be defined
    $user_roles[$uid] = array();

    // Get the list of roles which are connected to the karma module
    $karma_roles = user_karma_roles();

    // Make up the query
    if (sizeof($karma_roles)) {
      $query = ' AND rid IN ('. implode(', ', $karma_roles) .')';
  
    // Make up the $return variable with the query's result
      $result = db_query("SELECT rid FROM {users_roles} WHERE uid = %d AND ($query)", $uid);
      while ($data = db_fetch_object($result)) {  
        $user_roles[$uid][] = $data->rid;
      }
    }
  } // End of calculation if the user wasn't in the cache already
  
  user_karma_msg("user_roles_1: ". $user_roles[$uid][0]);
  user_karma_msg("user_roles_2: ". $user_roles[$uid][1]);
  user_karma_msg("user_roles_3: ". $user_roles[$uid][2]);

  return $user_roles[$uid];
}

/** 
 * Implementation of hook_user(). 
 * This will make sure that the user is assigned the right role
 * as soon as s/he signs up.
 */
function user_karma_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
 
    // Recalculate the role after an update
    case 'after_update':
      user_karma_calculate_role($account->uid);
      break;

    case 'view':
      return user_karma_view_profile($account);
      break;

    case 'load':
      if (variable_get('user_karma_load_rank_in_profile', FALSE)) {
        $account->rank = user_karma_user_rank($account->uid);
      }
      if (variable_get('user_karma_load_karma_in_profile', FALSE)) {
        $account->karma = user_karma_user_karma($account->uid);
      }
      break;
    # END OF SWITCH
  }
}

##################################################################
#         END OF FUNCTIONS FOR THE MANAGEMENT OF ROLES ROLES
##################################################################

##################################################################
#             START OF FUNCTIONS TO DISPLAY KARMA
##################################################################

function user_karma_view_profile($account) {

  $uid = $account->uid; 
  static $users_t;

  // Counts the users
  if (!isset($users_t)) {
    $users_t = db_result(db_query("SELECT COUNT(*) FROM {users} WHERE status = %d", 1));
  }

  // Calculate ranks
  $rank = user_karma_user_rank($uid);
  $rank_10000 = (int) ($rank / $users_t * 10000);

  if (variable_get('user_karma_show_ranking_in_user_page', FALSE)) {
    $account->content['User karma']['rank'] = array(
      '#type' => 'user_profile_item',
      '#title' => 'Rank',
      '#value' => $rank,
      '#weight' => 50,
    );
  }

  if (variable_get('user_karma_show_ranking_in_user_page', FALSE)) {
    $account->content['User karma']['rank10000'] = array(
      '#type' => 'user_profile_item',
      '#title' => 'Rank (out of 10000)',
      '#value' => $rank_10000,
      '#weight' => 51,
    );
  }

  if (variable_get('user_karma_show_karma_in_user_page', FALSE)) {
    $account->content['User karma']['karma'] = array(
      '#type' => 'user_profile_item',
      '#title' => 'Karma',
      '#value' => user_karma_user_karma($uid),
      '#weight' => 52,
    );
  }
}

##################################################################
#             END OF FUNCTIONS TO DISPLAY KARMA
##################################################################

##################################################################
#          FUNCTIONS TO GATHER KARMA INFORMATION
##################################################################

function user_karma_user_rank($uid) {
  // If there is no karma stored, then the comparison is made with "0".
  // Otherwise, the comparison is made with a sub-query.
  // THIS IS BECAUSE ANY INTEGER COMPARED TO NULL IS 0, WHICH WON'T WORK
  // IN TERMS OF RANKING
  $r = db_result(db_query("SELECT COUNT(*) FROM {votingapi_cache} vc2 WHERE vc2.content_type = '%s' AND vc2.value_type = '%s' AND vc2.tag = '%s' AND vc2.function = '%s' AND vc2.content_id = %d", 'user', 'karma_points', 'karma', 'sum', $uid));
  if ($r == 0) {
    $extra_bit = "0";
  } 
  else {
    $extra_bit = "(SELECT value FROM {votingapi_cache} vc2 WHERE vc2.content_type = '%s' AND vc2.value_type = '%s' AND vc2.tag = '%s' AND vc2.function = '%s' AND vc2.content_id = %d)";
  }

  // Query curtesy of http://arjen-lentz.livejournal.com/55083.html and 
  // http://arjen-lentz.livejournal.com/56292.html - EVERYBODY should 
  // read those pages!
  $r = db_result(db_query("SELECT COUNT(*) + 1 AS ranking FROM {votingapi_cache} vc LEFT JOIN {users} u ON u.uid = vc.content_id WHERE vc.content_type = '%s' AND vc.value_type = '%s' AND vc.tag = '%s' AND vc.function = '%s' AND vc.value > $extra_bit", 'user', 'karma_points', 'karma', 'sum', 'user', 'karma_points', 'karma', 'sum', $uid)); 

  user_karma_msg("User ranking for $uid: $r");

  return $r;
}

function user_karma_user_karma($uid) {
  
  // Get the vote
  $criteria = array();
  $criteria['content_type'] = 'user'; 
  $criteria['content_id'] = $uid;
  $criteria['value_type'] = 'karma_points';
  $criteria['tag'] = 'karma';
  $criteria['uid'] = 1;
  $r = votingapi_select_votes($criteria);

  // Just in case...
  if (!$r) {
    $r = array();
    $r[0]['value'] = 0;
  }
  user_karma_msg("User karma for $uid: ". $r[0]['value']);
  // Return it!
  return $r[0]['value'];
}
//**************************************


######################################################
# HELPER FUNCTIONS
######################################################
/**
 * Helper function to create a nice, "fitting" SQL to check that
 * a karma point is not expired. This can be used by several
 * plugins...
 *
 * @param $field_name
 *   The name of the "created" field (it might be aliased)
 * @return
 *   A nice SQL fragment that will fit after an AND and after a WHERE
 */
function user_karma_sql_duration($days, $field_name, $operator = '>') {
  if ((int)$days <= 0) {
    return '';
  }

  $seconds = $days * 86400;
  return ' AND '. $field_name .' '. $operator .' ('. time() .' - '. $seconds .')';
}

function user_karma_msg($msg) {
  global $user;

  if (variable_get('user_karma_debug_messages', FALSE) && $user->uid == 1) {
    drupal_set_message("DEBUG: ".check_plain($msg) );
  }

}
